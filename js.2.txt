try语句如果抛出异常，则执行catch语句，否则不执行，无论有没有异常，都执行finally语句；try语句必须跟catch或finally语句中至少一个组合使用。
try catch语句的嵌套语句执行顺序：
1）如果内部嵌套的try语句抛出异常，但内部没有相配套的catch语句，先执行内部的finally语句，然后跳到最近一层的catch语句执行。
2）如果内部嵌套的try语句抛出异常，内部有相配套的catch语句，先执行此语句处理异常，再执行内部的finally语句。不会再在外部处理异常。
3）如果内部嵌套的try语句抛出异常，内部有相配套的catch语句，并且catch语句也抛出异常，如果内部的catch语句有对异常的处理，先执行异常处理语句，然后执行内部的finally语句，最后执行离内部catch语句抛出异常最近一层的catch语句处理异常。

包装对象，就是当基本类型以对象的方式去使用时，JavaScript会转换成对应的包装类型，相当于new一个对象，内容和基本类型的内容一样，然后当操作完成再去访问的时候，这个临时对象会被销毁，然后再访问时候就是undefined

类型检测
typeof 会返回一个字符串，适合函数判断和基本类型的判断（特殊null返回的数据类型是“object”）
instanceof判断对象类型,但是不同的window和iframe对象类型检测不能用
Object.prototype.toString.apply([]) === "[object.Array]"//在IE6,7,8下，对null和undefined检测失效

一、隐式转换：巧妙用“+”和“-”规则转换类型

1、num-0：变为数值       2、num+"":变为字符串

当想要把字符串变为数值时：
字符串与数字之间的加号理解为字符串拼接“123”+65=“12365”

减号理解为运算 “123”-65=58

二、a==b 与 a===b 的区别：
1、类型相同时比较具体数值
2、类型不同时：
    1）==：尝试类型转换：
            string => number 把字符串变为数值再进行比较
            ture   => 1            把布尔值变为数值再进行比较
            false  => 0
            object => 基本类型（涉及包装类）
    2）===： 直接返回false

=:表示赋值，比如a=3;就是把3放到a里面
= =：表示等于，3= ="3";会返回true，因为浏览器内部会把字符串3变成数字3
= = =：表示严格等于，不会转换数据类型3= = ="3"，会返回false，因为不会转换他们的数据类型，数字和字符串当然就不相等了
对象和对象比较，是比较的引用，两个对象都是new出来的（新创建出来的），所以是不同的对象，不同的对象的引用是不同的，所以输出是false
只有对象和基本类型进行比较的时候，才会将对象转变成基本类型，再作比较。两个对象比较的时候是不会转成基本类型的，如：
var a = new String('hi');
var b = new String('hi');
a == 'hi';//true （先转换成基本类型再比较）
b == 'hi';//true（先转换成基本类型再比较）
但是 a == b;// false  （比较的是引用）

1. 用for-in遍历时，原型链上的属性也会被遍历到，而且是无序遍历。
2. 属性删除用delete, prototype属性不可被删除；var定义的变量也不可用delete删除，函数也不可以被delete掉（经验证，不同的内核实现方式不同，在chrome下不可被delete掉，返回false，但在firefox和IE10下可以被delete掉，返回true，对于函数也是相同的结果）

1. 原始表达式 //常量、直接量、关键字、变量 3.14、"test"、null、i、k、j
2. 初始化表达式 //[1,2]、{x:1, y:2}
3. 函数表达式 //var fe = function(){}、(function(){})()
4. 属性访问表达式 //var o = {x:1}、o.x、o['x']
5. 调用表达式 //func()
6. 对象创建表达式 //new Func(1,2)、new Object

序列化
通过全局的JSON.stringify(obj);做序列化处理
注意：
1、当你对象中有属性的值是undefined的时候，这该属性是不会出现在序列化字符串的结果里
2、当你属性的值是NaN或者Infinity时，序列化的结果是null；当你的属性值是new Date（），序列化的结果是UTC的时间格式

后端返回JSON数据，则用JSON.parse来转化；合法的JSON的属性必须用双引号引起来

对象的组成
方法——函数：过程、动态的
属性——变量：状态、静态的
this:当前发生事件的对象（当前的方法属于谁）
不能在系统对象中随意附加方法、属性，否则会覆盖已有方法、属性

如果函数名前面加new,函数中的this不是指向window,而是一个新创建的对象
偷偷做了两件事
替你创建了一个空白对象
替你返回了这个对象

什么是原型
原型是class，修改他可以影响一类元素
在类的原型上加方法 Array.prototype.sum=function()
var obj=new 函数（）
     对象          类
把一样的属性方法放原型里，直接继承效率高
在已有对象中加入自己的属性、方法
原型修改对已有对象的影响

把面向过程的程序，改写成面向对象的形式
原则：
不能有函数套函数、但可以有全局变量
过程
onload	→	构造函数
全局变量	→	属性
函数		→	方法

function A()
{
	this.abc=12;
}

A.prototype.show=function ()
{
	alert(this.abc);
};

//继承A

function B()
{
	//this->new B()
	A.call(this);                   继承属性
}

//B.prototype=A.prototype;        A变B也变
for(var i in A.prototype)
{
	B.prototype[i]=A.prototype[i];        继承方法
}

B.prototype.fn=function ()
{
	alert('abc');
};

var objB=new B();
var objA=new A();
例子
function Drag(id)
{
	var _this=this;
	this.disX=0;
	this.disY=0;
	
	this.oDiv=document.getElementById(id);
	this.oDiv.onmousedown=function (ev)
	{
		_this.fnDown(ev);
		
		return false;
	};
};

Drag.prototype.fnDown=function (ev)
{
	var _this=this;
	var oEvent=ev||event;
	
	this.disX=oEvent.clientX-this.oDiv.offsetLeft;
	this.disY=oEvent.clientY-this.oDiv.offsetTop;
	
	document.onmousemove=function (ev)
	{
		_this.fnMove(ev);
	};
	document.onmouseup=function ()
	{
		_this.fnUp();
	};
};

Drag.prototype.fnMove=function (ev)
{
	var oEvent=ev||event;
	
	this.oDiv.style.left=oEvent.clientX-this.disX+'px';
	this.oDiv.style.top=oEvent.clientY-this.disY+'px';
};

Drag.prototype.fnUp=function ()
{
	document.onmousemove=null;
	document.onmouseup=null;
};
function LimitDrag(id)
{
	Drag.call(this, id);	//继承属性
}

for(var i in Drag.prototype)
{
	LimitDrag.prototype[i]=Drag.prototype[i];
}


命名空间，同一函数不会覆盖影响
var zns={};

zns.common={};
zns.fx={};
zns.site={};

zns.common.getUser=function ()
{
	alert('a');
};

zns.fx.getUser=function ()
{
	alert('b');
};

zns.site.getUser=function ()
{
	alert('c');
};

zns.common.getUser();
zns.fx.getUser();
zns.site.getUser();



childNodes 有的浏览器下既包括文本节点也包括元素节点
nodeType  Obj.childNodes.nodeType==3是文本节点 ==1是元素节点
获取子节点  children
获取父节点 parentNode 不会变除非修改结构
例子：<li><a></a></li>  点击链接，隐藏整个li
offsetParent  随着样式变化 relative abosolute
例子：获取元素在页面上的实际位置

DOM方式操作元素属性
获取：getAttribute(名称)
设置：setAttribute(名称, 值)
删除：removeAttribute(名称)

通过className条件筛选
function getByClass(oParent, sClass)
{
	var aResult=[];
	var aEle=oParent.getElementsByTagName('*');
	
	for(var i=0;i<aEle.length;i++)
	{
		if(aEle[i].className==sClass)
		{
			aResult.push(aEle[i]);
		}
	}
	
	return aResult;
}

创建元素
父级.appendChild(子节点);
		oUl.appendChild(oLi);
		if(aLi.length>0)
		{
			oUl.insertBefore(oLi, aLi[0]);
		}
		else
		{
			oUl.appendChild(oLi);
		}

文档碎片
window.onload=function ()
{
	var oUl=document.getElementById('ul1');
	var oFrag=document.createDocumentFragment();
	
	for(var i=0;i<10000;i++)
	{
		var oLi=document.createElement('li');
		
		oFrag.appendChild(oLi);
	}
	
	oUl.appendChild(oFrag);
};

getElementsByTagName('tbody')=tBodies(数组）
还有tHead、tFoot、rows、cells

搜索
1.字符串比较 
2.大小写转换
3.search() 不存在相同返回-1
4.多关键字 split

appendChild 先把元素从原有父级上删除，再添加到新的父级

表格排序
for(var i=0;i<oTab.tBodies[0].rows.length;i++)
{
         arr[i]=oTab.tBodies[0].rows[i];
}
arr.sort(function(tr1,tr2){
            var n1=parseInt(tr1.cells[0].innerHTML);
             var n2=parseInt(tr2.cells[0].innerHTML);
            return n1-n2;
})
for(var i=0;i<arr.length;i++)
{
            oTab.tBodies[0].appendChild(arr[i]);
}
sort()只用于数组

元素节点  ELEMENT_NODE  1

属性节点  ATTRIBUTE_NODE  2

文本节点  TEXT_NODE  3

注释节点  COMMENT_NODE  8

文档节点  DOCUMENT_NODE  9

文档类型节点  DOCUMENT_TYPE_NODE  10

文档片段节点  DOCUMENT_FRAGMENT_NODE  11

每一个节点都有一个type属性，用于表明节点的类型，节点类型通过数值常量，和字符常量来表示，元素唯一拥有文本节点和子节点的节点类型，属性节点被包含在元素节点中的一部分，不单独出现，某个节点之后的空白区域也是属于文本节点，文档节点是所有文档的根节点，是所有元素的父节点。

■ 元素节点，
> 拥有子节点和文本，是唯一能拥有属性的节点类型<br>
■ 属性节点，
> 元素中的属性，是附属于元素的，是包含他的元素节点的一部分，不属于文档树的一部分<br>
■ 文本节点，
> 只包含文本内容(可以只包含空白)的节点，在xml中称为字符数据；<br>
> 在文档树中元素的文本内容和属性的文本内容都是由文本节点表示的<br>
> 某个节点的空白区域，也是属于文本节点<br>
■ 注释节点： 
> 表示注释的内容<br>
■ 文档节点： 
> 文档树的根节点，是其他节点的父节点；
> 注意不是html或者xml的根元素。根元素是作为文档节点的子节点出现的<br>
> 整个代码之上看做是文档节点<br>
■ 文档类型节点： 例;<!doctype html><br>
■ 文档片段节点：
> 文档片段是轻量级的或者是最小的Document 对象，他表示文档的一部分或者是一段，他不属于文档树；
> 他的特殊行为：占位符，暂时存放一次插入文档的节点，同时有利于剪贴复制操作

什么是事件对象？在触发DOM上的事件时都会产生一个对象
事件对象EVENT
①DOM中的事件对象  属性
（1）、type属性用于获取事件类型
（2）、target属性用于获取事件目标
（3）、stopPropagation()方法 用于阻止事件冒泡
（4）、preventDefault() 方法 阻止事件的默认行为
如果一个div里面有一个button，button和div都绑定了click事件，如果是事件冒泡，那么点击button的时候，首先触发button的处理函数，然后触发div的处理函数。（由内而外）
如果有时候不想冒泡，也就是不希望div的事件被触发，那么需要阻止事件冒泡。stopPropagation()方法
如果需要阻止a标签的默认属性跳转，可以使用阻止事件的默认行为preventDefault()方法

1.IE事件处理程序：IE也提供了类似DOM2级事件处理程序
attachEvent()添加事件
detachEvent()删除事件
接收相同的两个参数，事件处理程序的名称和事件处理程序的函数。去掉了布尔值，不使用第三个参数的原因:IE8以及更早的浏览器版本只支持事件冒泡！
在ie下给btn3添加事件
btn3.attachEvent('onclick',showMes);
主意：在ie事件处理程序上，又要把on加上
btn3.detachEvent('onclick',showMes);
支持ie事件处理程序的浏览器主要有ie和opera两个浏览器。

2.跨浏览器事件处理程序
var eventUtil = {
//添加句柄
addHandler:function(element,type,handler){
if(element.addEventListener){element.addEventListener(type,handler,false);} // DOM2级事件处理程序
else if(element.attachEvent){element.attachEvent('on'+type,handler);} // IE事件处理程序
else{element['on'+type]=handler;} // DOM0级事件处理程序
},
//删除句柄
removeHandler:function(element,type,handler){
if(element.removeEventListener){element.removeEventListener(type,handler,false);} // DOM2级事件处理程序
else if(element.detachEvent){element.detachEvent('on'+type,handler);} // IE事件处理程序
else{element['on'+type]=null;} //DOM0级事件处理程序
}
}
eventUtil.addHandler(btn3,'click',showMessage);

3.js中所有用'.'的地方都可以使用'[]'
如：对象的点击事件element.onclick===element['onclick']



